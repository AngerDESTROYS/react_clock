{"version":3,"sources":["component/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","timerId","state","currentTime","Date","toUTCString","slice","this","window","setInterval","setState","props","onTimeUpdate","clearInterval","name","className","Component","App","hasClock","clockName","timeUpdateTimerId","handleTimeUpdate","time","console","info","document","addEventListener","event","preventDefault","startClockNameTimer","startUpdateTimeTimer","_prevProps","prevState","debug","newName","value","now","toString","getRandomName","forceUpdate","ReactDOM","render","getElementById"],"mappings":"qMAWaA,EAAb,4MACEC,QAAU,EADZ,EAGEC,MAAoB,CAClBC,aAAa,IAAIC,MAAOC,cAAcC,OAAO,IAAK,IAJtD,uDAOE,WAAqB,IAAD,OAClBC,KAAKN,QAAUO,OAAOC,aAAY,WAChC,IAAMN,GAAc,IAAIC,MAAOC,cAAcC,OAAO,IAAK,GAEzD,EAAKI,SAAS,CAAEP,gBAChB,EAAKQ,MAAMC,aAAaT,KACvB,OAbP,kCAgBE,WACEU,cAAcN,KAAKN,WAjBvB,oBAoBE,WACE,IAAQa,EAASP,KAAKI,MAAdG,KACAX,EAAgBI,KAAKL,MAArBC,YAER,OACE,sBAAKY,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SAAiCD,IAChC,YACD,sBAAMC,UAAU,cAAhB,SACGZ,WA7BX,GAA2Ba,a,MCIpB,IAAMC,EAAb,4MACEf,MAAkB,CAChBgB,UAAU,EACVC,UAAW,WAHf,EAMElB,QAAU,EANZ,EAQEmB,kBAAoB,EARtB,EAqCEC,iBAAmB,SAACC,GAElBC,QAAQC,KAAKF,IAvCjB,uDAUE,WAAqB,IAAD,OAClBG,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBACN,EAAKlB,SAAS,CAAEQ,UAAU,OAG5BO,SAASC,iBAAiB,SAAS,WACjC,EAAKhB,SAAS,CAAEQ,UAAU,OAG5BX,KAAKsB,sBACLtB,KAAKuB,yBArBT,gCAwBE,SAAmBC,EAAgBC,GAC7BzB,KAAKL,MAAMgB,UACTX,KAAKL,MAAMiB,YAAca,EAAUb,WAErCI,QAAQU,MAAR,uBAA8BD,EAAUb,UAAxC,eAAwDZ,KAAKL,MAAMiB,cA5B3E,kCAiCE,WACEN,cAAcN,KAAKN,WAlCvB,iCA0CE,WAAuB,IAAD,OACpBM,KAAKN,QAAUO,OAAOC,aAAY,WAChC,IAAMyB,EAlDZ,WACE,IAAMC,EAAQ/B,KAAKgC,MAAMC,WAAW/B,OAAO,GAE3C,MAAM,SAAN,OAAgB6B,GA+CIG,GAEhB,EAAK5B,SAAS,CAAES,UAAWe,MAC1B,QA/CP,kCAkDE,WAAwB,IAAD,OACrB3B,KAAKa,kBAAoBZ,OAAOC,aAAY,WAC1C,EAAK8B,gBACJ,OArDP,oBAwDE,WACE,MAAgChC,KAAKL,MAA7BgB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAElB,OACE,sBAAKJ,UAAU,MAAf,UACE,6CAECG,GACC,cAAC,EAAD,CACEJ,KAAMK,EACNP,aAAcL,KAAKc,0BAlE/B,GAAyBL,aCZzBwB,IAASC,OACP,cAAC,EAAD,IACAhB,SAASiB,eAAe,W","file":"static/js/main.4e8035c7.chunk.js","sourcesContent":["import { Component } from 'react';\n\ninterface ClockProps {\n  name: string;\n  onTimeUpdate: (time: string) => void;\n}\n\ninterface ClockState {\n  currentTime: string;\n}\n\nexport class Clock extends Component<ClockProps, ClockState> {\n  timerId = 0;\n\n  state: ClockState = {\n    currentTime: new Date().toUTCString().slice(-12, -4),\n  };\n\n  componentDidMount() {\n    this.timerId = window.setInterval(() => {\n      const currentTime = new Date().toUTCString().slice(-12, -4);\n\n      this.setState({ currentTime });\n      this.props.onTimeUpdate(currentTime); // Report time using callback\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { name } = this.props;\n    const { currentTime } = this.state;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">{name}</strong>\n        {' time is '}\n        <span className=\"Clock__time\">\n          {currentTime}\n        </span>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport { Clock } from './component/Clock';\nimport './App.scss';\n\ninterface AppState {\n  hasClock: boolean;\n  clockName: string;\n}\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport class App extends Component<{}, AppState> {\n  state: AppState = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  timerId = 0;\n\n  timeUpdateTimerId = 0;\n\n  componentDidMount() {\n    document.addEventListener('contextmenu', (event: MouseEvent) => {\n      event.preventDefault();\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n\n    this.startClockNameTimer();\n    this.startUpdateTimeTimer();\n  }\n\n  componentDidUpdate(_prevProps: {}, prevState: AppState) {\n    if (this.state.hasClock) {\n      if (this.state.clockName !== prevState.clockName) {\n        // eslint-disable-next-line no-console\n        console.debug(`Renamed from ${prevState.clockName} to ${this.state.clockName}`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  handleTimeUpdate = (time: string) => {\n    // eslint-disable-next-line no-console\n    console.info(time);\n  };\n\n  startClockNameTimer() {\n    this.timerId = window.setInterval(() => {\n      const newName = getRandomName();\n\n      this.setState({ clockName: newName });\n    }, 3300);\n  }\n\n  startUpdateTimeTimer() {\n    this.timeUpdateTimerId = window.setInterval(() => {\n      this.forceUpdate();\n    }, 1000);\n  }\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && (\n          <Clock\n            name={clockName}\n            onTimeUpdate={this.handleTimeUpdate}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}